type Query {
    motorcycleById(id: ID!): Motorcycle
    findByUser(findUserInput: FindUserInput!): User
}

type Mutation {
    createMotorcycle(motorcycleInput: MotorcycleInput!): Motorcycle
    deleteMotorcycle(id: ID!): Boolean
    createUserMotorcycle(userMotorcycleInput: UserMotorcycleInput!): UserMotorcycle
    createPart(partInput: PartInput!): Part
    createUserMotorcyclePart(userMotorcyclePartInput: UserMotorcyclePartInput!): UserMotorcyclePart
    createUser(userInput: UserInput!): User
    deleteUser(id: ID!): Boolean
}

type Motorcycle {
    id: ID
    brand: Brand
    name: String
    engineSize: Int
}

type UserMotorcycle {
    id: ID
    color: String
    motorcycle: Motorcycle
    parts: [Part]
}

type User {
    id: ID
    username: String
    motorcycles: [UserMotorcycle]
}

type Part {
    id: ID
    brand: String
    partNr: String
    description: String
}

type UserMotorcyclePart {
    id: ID
    part: Part
}

input MotorcycleInput {
    brand: Brand!
    name: String!
    engineSize: Int!
}

input UserInput {
    username: String!
    password: String!
}

input FindUserInput {
    username: String!
}

input UserMotorcycleInput {
    userId: ID!
    motorcycleId: ID!
    color: String!
}

input PartInput {
    brand: String!
    partNr: String!
    description: String!
}

input UserMotorcyclePartInput {
    userMotorcycleId: ID!
    partId: ID!
}

enum Brand {
    APRILLA, BMW, DUCATI, HARLEY_DAVIDSON, HONDA, INDIAN, KAWASAKI, KTM, ROYAL_ENFIELD, SUZUKI, TRIUMPH, YAMAHA
}